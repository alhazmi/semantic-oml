/*
 * This file was automatically generated by oml2-scaffold V2.12.0pre.79-58cf-dirty
 * for ping version 1.0.0.
 * Please do not edit.
 */

#ifndef PING_OML_H
#define PING_OML_H

#ifdef __cplusplus
extern "C" {
#endif

/* Define HUGE, etc.. */
#define _GNU_SOURCE
#include <math.h>
/* Get size_t and NULL from <stddef.h> */
#include <stddef.h>

#include <oml2/omlc.h>

typedef struct {
  OmlMP *packet_loss;
  OmlMP *delay;

} oml_mps_t;


#ifdef OML_FROM_MAIN

extern OMLSemDef *oml_sem_register_concepts(char***concepts, int n);

/*
 * Only declare storage once, usually from the main
 * source, where OML_FROM_MAIN is defined
 */

static OmlMPDef oml_packet_loss_def[] = {
  {"packet_loss", OML_INT32_VALUE, NULL},
  {"timestamp", OML_DATETIME_VALUE, NULL},
  {"link", OML_STRING_VALUE, NULL},
  {NULL, (OmlValueT)0, NULL}
};

static OmlMPDef oml_delay_def[] = {
  {"delay", OML_DOUBLE_VALUE, NULL},
  {"timestamp", OML_DATETIME_VALUE, NULL},
  {"link", OML_STRING_VALUE, NULL},
  {NULL, (OmlValueT)0, NULL}
};

static oml_mps_t g_oml_mps_storage;
oml_mps_t* g_oml_mps_ping = &g_oml_mps_storage;

static inline void
oml_register_mps(void)
{
  int i,j;
  char*** concept;// = (char***)oml_malloc(sizeof(char**)*);
  concept = (char***)oml_malloc(sizeof(char**)*4);
  concept[0] = (char**)oml_malloc(sizeof(char*)*3);
  concept[0][0]=strdup("omn-monitoring:SimpleMeasurement");
  concept[0][1]=strdup("omn-monitoring:isMeasurementOf");
  concept[0][2]=strdup("omn-monitoring-metric:PacketLoss");
  concept[1] = (char**)oml_malloc(sizeof(char*)*3);
  concept[1][0]=strdup("omn-monitoring-metric:PacketLoss");
  concept[1][1]=strdup("omn-monitoring:isMeasurementMetricOf");
  concept[1][2]=strdup("omn-resource:Link");
  concept[2] = (char**)oml_malloc(sizeof(char*)*3);
  concept[2][0]=strdup("omn-monitoring-data:SimpleMeasurement");
  concept[2][1]=strdup("omn-monitoring-data:hasMeasurementDataValue");
  concept[2][2]=strdup("%value%");
  concept[3] = (char**)oml_malloc(sizeof(char*)*3);
  concept[3][0]=strdup("omn-monitoring-data:SimpleMeasurement");
  concept[3][1]=strdup("omn-monitoring:hasUnit");
  concept[3][2]=strdup("omn-monitoring-unit:percent");
  oml_packet_loss_def[0].relations = oml_sem_register_concepts(concept, 4);
  for (i=0;i<4;i++)
  {
    for (j=0;j<3;j++)
      free(concept[i][j]);
    oml_free(concept[i]);
  }
  oml_free(concept);
  concept = (char***)oml_malloc(sizeof(char**)*1);
  concept[0] = (char**)oml_malloc(sizeof(char*)*3);
  concept[0][0]=strdup("omn-monitoring-data:SimpleMeasurement");
  concept[0][1]=strdup("omn-monitoring-data:hasTimestamp");
  concept[0][2]=strdup("%value%");
  oml_packet_loss_def[1].relations = oml_sem_register_concepts(concept, 1);
  for (i=0;i<1;i++)
  {
    for (j=0;j<3;j++)
      free(concept[i][j]);
    oml_free(concept[i]);
  }
  oml_free(concept);
  concept = (char***)oml_malloc(sizeof(char**)*1);
  concept[0] = (char**)oml_malloc(sizeof(char*)*3);
  concept[0][0]=strdup("omn-resource:Link");
  concept[0][1]=strdup("omn:hasURI");
  concept[0][2]=strdup("%value%");
  oml_packet_loss_def[2].relations = oml_sem_register_concepts(concept, 1);
  for (i=0;i<1;i++)
  {
    for (j=0;j<3;j++)
      free(concept[i][j]);
    oml_free(concept[i]);
  }
  oml_free(concept);
  g_oml_mps_ping->packet_loss = omlc_add_mp("packet_loss", oml_packet_loss_def);
  concept = (char***)oml_malloc(sizeof(char**)*5);
  concept[0] = (char**)oml_malloc(sizeof(char*)*3);
  concept[0][0]=strdup("omn-monitoring:SimpleMeasurement");
  concept[0][1]=strdup("omn-monitoring:isMeasurementOf");
  concept[0][2]=strdup("omn-monitoring-metric:Delay");
  concept[1] = (char**)oml_malloc(sizeof(char*)*3);
  concept[1][0]=strdup("omn-monitoring-metric:Delay");
  concept[1][1]=strdup("omn-monitoring:isMeasurementMetricOf");
  concept[1][2]=strdup("omn-resource:Link");
  concept[2] = (char**)oml_malloc(sizeof(char*)*3);
  concept[2][0]=strdup("omn-monitoring-data:SimpleMeasurement");
  concept[2][1]=strdup("omn-monitoring-data:hasMeasurementDataValue");
  concept[2][2]=strdup("%value%");
  concept[3] = (char**)oml_malloc(sizeof(char*)*3);
  concept[3][0]=strdup("omn-monitoring-data:SimpleMeasurement");
  concept[3][1]=strdup("omn-monitoring:hasUnit");
  concept[3][2]=strdup("omn-monitoring-unit:second");
  concept[4] = (char**)oml_malloc(sizeof(char*)*3);
  concept[4][0]=strdup("omn-monitoring-unit:second");
  concept[4][1]=strdup("omn-monitoring-unit:hasPrefix");
  concept[4][2]=strdup("omn-monitoring-unit:milli");
  oml_delay_def[0].relations = oml_sem_register_concepts(concept, 5);
  for (i=0;i<5;i++)
  {
    for (j=0;j<3;j++)
      free(concept[i][j]);
    oml_free(concept[i]);
  }
  oml_free(concept);
  concept = (char***)oml_malloc(sizeof(char**)*1);
  concept[0] = (char**)oml_malloc(sizeof(char*)*3);
  concept[0][0]=strdup("omn-monitoring-data:SimpleMeasurement");
  concept[0][1]=strdup("omn-monitoring-data:hasTimestamp");
  concept[0][2]=strdup("%value%");
  oml_delay_def[1].relations = oml_sem_register_concepts(concept, 1);
  for (i=0;i<1;i++)
  {
    for (j=0;j<3;j++)
      free(concept[i][j]);
    oml_free(concept[i]);
  }
  oml_free(concept);
  concept = (char***)oml_malloc(sizeof(char**)*1);
  concept[0] = (char**)oml_malloc(sizeof(char*)*3);
  concept[0][0]=strdup("omn-resource:Link");
  concept[0][1]=strdup("omn:hasURI");
  concept[0][2]=strdup("%value%");
  oml_delay_def[2].relations = oml_sem_register_concepts(concept, 1);
  for (i=0;i<1;i++)
  {
    for (j=0;j<3;j++)
      free(concept[i][j]);
    oml_free(concept[i]);
  }
  oml_free(concept);
  g_oml_mps_ping->delay = omlc_add_mp("delay", oml_delay_def);

}

#else
/*
 * Not included from the main source, only declare the global pointer
 * to the MPs and injection helpers.
 */

extern oml_mps_t* g_oml_mps_ping;

#endif /* OML_FROM_MAIN */

static inline int
oml_inject_packet_loss(OmlMP *mp, int32_t packet_loss, const char *timestamp, const char *link)
{
  int ret = -1;

  OmlValueU v[3];
  omlc_zero_array(v, 3);

  omlc_set_int32(v[0], packet_loss);
  omlc_set_string(v[1], timestamp);
  omlc_set_string(v[2], link);

  ret = omlc_inject(mp, v);

  omlc_reset_string(v[2]);
  return ret;
}

static inline int
oml_inject_delay(OmlMP *mp, double delay, const char *timestamp, const char *link)
{
  int ret = -1;

  OmlValueU v[3];
  omlc_zero_array(v, 3);

  omlc_set_double(v[0], delay);
  omlc_set_string(v[1], timestamp);
  omlc_set_string(v[2], link);

  ret = omlc_inject(mp, v);

  omlc_reset_string(v[2]);
  return ret;
}


/* Compatibility with old applications */
#ifndef g_oml_mps
# define g_oml_mps	g_oml_mps_ping
#endif

#ifdef __cplusplus
}
#endif

#endif /* PING_OML_H */
