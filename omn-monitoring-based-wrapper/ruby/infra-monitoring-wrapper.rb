# Copyright (c) 2015, Andisa Dewi, Yahya Al-Hazmi, Technische Universitaet Berlin

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License
#
# This wrapper reads data from SQLite database, fetches the necessary data from Zabbix and 
# sends them to the semantic OML Server. 
#
# The following libraries should to be installed for this wrapper to work:
# Zabbix Library for Ruby (use this command to install: gem install zabbixapi)
# OML Library for Ruby (use this command to install: gem install oml4r)
# => WARNING: 
# => After installing the OML library, go to the directory where the library is installed
# => For example: /var/lib/gems/1.9.1/gems/oml4r-2.10.6/
# => Go to the lib directory and replace the file oml4r.rb with the modified oml4r.rb
# => located in this directory. The file is modified to support semantic data.

# The following files should also to be in the same directory:
# Configuration file (monitoring-config-data.cfg)

require "oml4r"
require "zabbixapi"
require 'date'
require 'time'

#The following was automatically generated by oml2-scaffold V2.12.0pre.79-58cf-dirty
 #for infrastructure-monitoring version 1.0.0.
#-----------------------------------------------------------------------#

class USED_MEMORY_MP < OML4R::MPBase
 name :used_memory
 param :used_memory, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:UsedMemory}{omn-monitoring-metric:UsedMemory|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:Byte}{omn-monitoring-unit:Byte|omn-monitoring-unit:hasPrefix|omn-monitoring-unit:giga}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class TOTAL_MEMORY_MP < OML4R::MPBase
 name :total_memory
 param :total_memory, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:TotalMemory}{omn-monitoring-metric:TotalMemory|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:Byte}{omn-monitoring-unit:Byte|omn-monitoring-unit:hasPrefix|omn-monitoring-unit:giga}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class AVAILABLE_MEMORY_MP < OML4R::MPBase
 name :available_memory
 param :available_memory, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:AvailableMemory}{omn-monitoring-metric:AvailableMemory|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:Byte}{omn-monitoring-unit:Byte|omn-monitoring-unit:hasPrefix|omn-monitoring-unit:giga}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class FREE_MEMORY_MP < OML4R::MPBase
 name :free_memory
 param :free_memory, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:FreeMemory}{omn-monitoring-metric:FreeMemory|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:Byte}{omn-monitoring-unit:Byte|omn-monitoring-unit:hasPrefix|omn-monitoring-unit:giga}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class CACHED_MEMORY_MP < OML4R::MPBase
 name :cached_memory
 param :cached_memory, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:CachedMemory}{omn-monitoring-metric:CachedMemory|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:Byte}{omn-monitoring-unit:Byte|omn-monitoring-unit:hasPrefix|omn-monitoring-unit:giga}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class BUFFERS_MEMORY_MP < OML4R::MPBase
 name :buffers_memory
 param :buffers_memory, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:BuffersMemory}{omn-monitoring-metric:BuffersMemory|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:Byte}{omn-monitoring-unit:Byte|omn-monitoring-unit:hasPrefix|omn-monitoring-unit:giga}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class USED_SWAP_MP < OML4R::MPBase
 name :used_swap
 param :used_swap, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:UsedSwap}{omn-monitoring-metric:UsedSwap|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:percent}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class USED_BANDWIDTH_MP < OML4R::MPBase
 name :used_bandwidth
 param :used_bandwidth, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:UsedBandwidth}{omn-monitoring-metric:UsedBandwidth|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:bitpersecond}{omn-monitoring-unit:bitpersecond|omn-monitoring-unit:hasPrefix|omn-monitoring-unit:mega}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class CPU_IDLE_MP < OML4R::MPBase
 name :cpu_idle
 param :cpu_idle, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:CPUidle}{omn-monitoring-metric:CPUidle|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:percent}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class CPU_NICE_MP < OML4R::MPBase
 name :cpu_nice
 param :cpu_nice, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:CPUnice}{omn-monitoring-metric:CPUnice|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:percent}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class CPU_IOWAIT_MP < OML4R::MPBase
 name :cpu_iowait
 param :cpu_iowait, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:CPUIOwait}{omn-monitoring-metric:CPUIOwait|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:percent}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class AVAILABILITY_MP < OML4R::MPBase
 name :availability
 param :availability, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:Availability}{omn-monitoring-metric:Availability|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class CPU_LOAD_MP < OML4R::MPBase
 name :cpu_load
 param :cpu_load, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:CPULoad}{omn-monitoring-metric:CPULoad|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class FREE_SWAP_MP < OML4R::MPBase
 name :free_swap
 param :free_swap, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:FreeSwap}{omn-monitoring-metric:FreeSwap|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:Byte}{omn-monitoring-unit:Byte|omn-monitoring-unit:hasPrefix|omn-monitoring-unit:giga}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class CPU_USER_MP < OML4R::MPBase
 name :cpu_user
 param :cpu_user, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:CPUuser}{omn-monitoring-metric:CPUuser|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:percent}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class TOTAL_SWAP_MP < OML4R::MPBase
 name :total_swap
 param :total_swap, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:TotalSwap}{omn-monitoring-metric:TotalSwap|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:Byte}{omn-monitoring-unit:Byte|omn-monitoring-unit:hasPrefix|omn-monitoring-unit:giga}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class CPU_SYSTEM_MP < OML4R::MPBase
 name :cpu_system
 param :cpu_system, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:CPUsystem}{omn-monitoring-metric:CPUsystem|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:percent}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class DISKIO_READ_MP < OML4R::MPBase
 name :diskIO_read
 param :diskIO_read, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:DiskIORead}{omn-monitoring-metric:DiskIORead|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:Bytepersecond}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class FREE_DISK_SPACE_MP < OML4R::MPBase
 name :free_disk_space
 param :free_disk_space, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:FreeDiskSpace}{omn-monitoring-metric:FreeDiskSpace|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:percent}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class USED_DISK_SPACE_MP < OML4R::MPBase
 name :used_disk_space
 param :used_disk_space, {:type => :double, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:UsedDiskSpace}{omn-monitoring-metric:UsedDiskSpace|omn-monitoring:isMeasurementMetricOf|omn-domain-pc:PC}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:Byte}{omn-monitoring-unit:Byte|omn-monitoring-unit:hasPrefix|omn-monitoring-unit:giga}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :physicalresource, {:type => :string, :relation => "{omn-domain-pc:PC|omn:hasURI|%value%}"}
 param :virtualresource, {:type => :string, :relation => "{omn-domain-pc:VM|omn:hasURI|%value%}{omn-domain-pc:VM|omn-lifecycle:childOf|omn-domain-pc:PC}"}
end

class PACKET_LOSS_MP < OML4R::MPBase
 name :packet_loss
 param :packet_loss, {:type => :int32, :relation => "{omn-monitoring:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:PacketLoss}{omn-monitoring-metric:PacketLoss|omn-monitoring:isMeasurementMetricOf|omn-resource:Link}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:percent}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :link, {:type => :string, :relation => "{omn-resource:Link|omn:hasURI|%value%}"}
end

class DELAY_MP < OML4R::MPBase
 name :delay
 param :delay, {:type => :double, :relation => "{omn-monitoring:SimpleMeasurement|omn-monitoring:isMeasurementOf|omn-monitoring-metric:Delay}{omn-monitoring-metric:Delay|omn-monitoring:isMeasurementMetricOf|omn-resource:Link}{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasMeasurementDataValue|%value%}{omn-monitoring-data:SimpleMeasurement|omn-monitoring:hasUnit|omn-monitoring-unit:second}{omn-monitoring-unit:second|omn-monitoring-unit:hasPrefix|omn-monitoring-unit:milli}"}
 param :timestamp, {:type => :datetime, :relation => "{omn-monitoring-data:SimpleMeasurement|omn-monitoring-data:hasTimestamp|%value%}"}
 param :link, {:type => :string, :relation => "{omn-resource:Link|omn:hasURI|%value%}"}
end

#-----------------------------------------------------------------------#

#write code here
def get_vars(conf_file)
		#Here we define a couple of things
		#First is the regular expression that we use to 
		#get rid of whitespace and the array characters.
		line_sub = Regexp.new(/\s+|\\|"|\[|\]/)

		temp = Array.new
		vars=Hash.new

		#Check and make sure that the file exists
		unless File.exists?(conf_file) then
		  raise "The specified configuration file doesn't exist!"	
		end
		IO.foreach(conf_file) do |line|
			#discard comment lines
			if line.match(/^#/)
				next
			elsif
				#discard a blank line
				line.match(/^$/)
				next
			else
				#Snag variable and throw it into the varhash
				temp[0],temp[1] = line.to_s.scan(/^.*$/).to_s.split('=')

				#Match our regular expression and substitute
				temp.collect! do |val|
					val.gsub(line_sub, "")
				end
				#Add the variables to our hash
				vars[temp[0]] = temp[1]
			end
		end
		#And return them
		return vars
	end

conf = get_vars("../monitoring-config-data.cfg")

oml_opts = {
  :appName => conf['appname'],
  :domain => conf['domain'],
  :nodeID => conf['sender'],
  :collect => conf['target']
}

zabbix_opts = {
  :url => conf['zabbixuri'] + '/api_jsonrpc.php',
  :user => conf['username'],
  :password => conf['password']
}

OML4R::init(ARGV, oml_opts)

while true

	zbx = ZabbixApi.connect(zabbix_opts)

	begin
	    hostname = "<hostname>"
	    vm = "<vm>"

		host = zbx.query(
		  :method => "host.get",
		  :params => {
		    :output => "extend",
		    :search => {
		      :name => hostname
		    }
		  }
		)
		unless host.empty?
			hostid = host[0]["hostid"]
		end

		total_memory = zbx.query(
		  :method => "item.get",
		  :params => {
		    :output => "extend",
		    :hostids => hostid, 
		    :search => {
		      :name => "Total memory"
		    }
		  }
		)
		unless total_memory.empty?
		  total_memory_ts = total_memory[0]["lastclock"].to_i
		  total_memory = total_memory[0]["lastvalue"].to_f / (1024)**3
		  TOTAL_MEMORY_MP.inject(total_memory, Time.at(total_memory_ts).localtime.strftime("%Y-%m-%dT%H:%M:%S"), hostname, vm)
		end

		used_memory = zbx.query(
		  :method => "item.get",
		  :params => {
		    :output => "extend",
		    :hostids => hostid, 
		    :search => {
		      :name => "Used memory"
		    }
		  }
		)
		unless used_memory.empty?
		  used_memory_ts = used_memory[0]["lastclock"].to_i
		  used_memory = used_memory[0]["lastvalue"].to_f / (1024)**3
		  USED_MEMORY_MP.inject(used_memory, Time.at(used_memory_ts).localtime.strftime("%Y-%m-%dT%H:%M:%S"), hostname, vm)
		end

		available_memory = zbx.query(
		  :method => "item.get",
		  :params => {
		    :output => "extend",
		    :hostids => hostid, 
		    :search => {
		      :name => "Available memory"
		    }
		  }
		)
		unless available_memory.empty?
		  available_memory_ts = available_memory[0]["lastclock"].to_i
		  available_memory = available_memory[0]["lastvalue"].to_f / (1024)**3
		  AVAILABLE_MEMORY_MP.inject(available_memory, Time.at(available_memory_ts).localtime.strftime("%Y-%m-%dT%H:%M:%S"), hostname, vm)
		end

		used_bandwidth = zbx.query(
		  :method => "item.get",
		  :params => {
		    :output => "extend",
		    :hostids => hostid, 
		    :search => {
		      :key_ => "net.if.in[eth2]"
		    }
		  }
		)
		unless used_bandwidth.empty?
		  used_bandwidth_ts = used_bandwidth[0]["lastclock"].to_i
		  used_bandwidth = used_bandwidth[0]["lastvalue"].to_f / (1024)**2
		  USED_BANDWIDTH_MP.inject(used_bandwidth, Time.at(used_bandwidth_ts).localtime.strftime("%Y-%m-%dT%H:%M:%S"), hostname, vm)
		end
	    
	end
	sleep 30
end

OML4R::close()

		  




