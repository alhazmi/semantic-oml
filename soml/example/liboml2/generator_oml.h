/*
 * This file was automatically generated by oml2-scaffold V2.12.0pre.79-58cf-dirty
 * for /home/ubuntu/soml/example/liboml2/generator version 1.0.0.
 * Please do not edit.
 */

#ifndef /HOME/UBUNTU/SOML/EXAMPLE/LIBOML2/GENERATOR_OML_H
#define /HOME/UBUNTU/SOML/EXAMPLE/LIBOML2/GENERATOR_OML_H

#ifdef __cplusplus
extern "C" {
#endif

/* Define HUGE, etc.. */
#define _GNU_SOURCE
#include <math.h>
/* Get size_t and NULL from <stddef.h> */
#include <stddef.h>

#include <oml2/omlc.h>

typedef struct {
  OmlMP *sensor;
  OmlMP *example;

} oml_mps_t;


#ifdef OML_FROM_MAIN

extern OMLSemDef *oml_sem_register_concepts(char***concepts, int n);

/*
 * Only declare storage once, usually from the main
 * source, where OML_FROM_MAIN is defined
 */

static OmlMPDef oml_sensor_def[] = {
  {"val", OML_INT32_VALUE, NULL},
  {"inverse", OML_DOUBLE_VALUE, NULL},
  {"name", OML_STRING_VALUE, NULL},
  {NULL, (OmlValueT)0, NULL}
};

static OmlMPDef oml_example_def[] = {
  {"guid_field", OML_GUID_VALUE, NULL},
  {"vector_bool_field", OML_VECTOR_BOOL_VALUE, NULL},
  {"uint32_field", OML_UINT32_VALUE, NULL},
  {"vector_double_field", OML_VECTOR_DOUBLE_VALUE, NULL},
  {"int64_field", OML_INT64_VALUE, NULL},
  {"vector_int32_field", OML_VECTOR_INT32_VALUE, NULL},
  {"uint64_field", OML_UINT64_VALUE, NULL},
  {"boolean_field", OML_BOOL_VALUE, NULL},
  {"vector_uint32_field", OML_VECTOR_UINT32_VALUE, NULL},
  {"double_field", OML_DOUBLE_VALUE, NULL},
  {"vector_int64_field", OML_VECTOR_INT64_VALUE, NULL},
  {"blob_field", OML_BLOB_VALUE, NULL},
  {"vector_uint64_field", OML_VECTOR_UINT64_VALUE, NULL},
  {"int32_field", OML_INT32_VALUE, NULL},
  {"string_field", OML_STRING_VALUE, NULL},
  {NULL, (OmlValueT)0, NULL}
};

static oml_mps_t g_oml_mps_storage;
oml_mps_t* g_oml_mps_/home/ubuntu/soml/example/liboml2/generator = &g_oml_mps_storage;

static inline void
oml_register_mps(void)
{
  int i,j;
  char*** concept;// = (char***)oml_malloc(sizeof(char**)*);
  g_oml_mps_/home/ubuntu/soml/example/liboml2/generator->sensor = omlc_add_mp("sensor", oml_sensor_def);
  g_oml_mps_/home/ubuntu/soml/example/liboml2/generator->example = omlc_add_mp("example", oml_example_def);

}

#else
/*
 * Not included from the main source, only declare the global pointer
 * to the MPs and injection helpers.
 */

extern oml_mps_t* g_oml_mps_/home/ubuntu/soml/example/liboml2/generator;

#endif /* OML_FROM_MAIN */

static inline int
oml_inject_sensor(OmlMP *mp, int32_t val, double inverse, const char *name)
{
  int ret = -1;

  OmlValueU v[3];
  omlc_zero_array(v, 3);

  omlc_set_int32(v[0], val);
  omlc_set_double(v[1], inverse);
  omlc_set_string(v[2], name);

  ret = omlc_inject(mp, v);

  omlc_reset_string(v[2]);
  return ret;
}

static inline int
oml_inject_example(OmlMP *mp, oml_guid_t guid_field, const bool vector_bool_field[], size_t vector_bool_field_len, uint32_t uint32_field, const double vector_double_field[], size_t vector_double_field_len, int64_t int64_field, const int32_t vector_int32_field[], size_t vector_int32_field_len, uint64_t uint64_field, uint8_t boolean_field, const uint32_t vector_uint32_field[], size_t vector_uint32_field_len, double double_field, const int64_t vector_int64_field[], size_t vector_int64_field_len, const void *blob_field, size_t blob_field_len, const uint64_t vector_uint64_field[], size_t vector_uint64_field_len, int32_t int32_field, const char *string_field)
{
  int ret = -1;

  OmlValueU v[15];
  omlc_zero_array(v, 15);

  omlc_set_guid(v[0], guid_field);
  omlc_set_vector_bool(v[1], vector_bool_field, vector_bool_field_len);
  omlc_set_uint32(v[2], uint32_field);
  omlc_set_vector_double(v[3], vector_double_field, vector_double_field_len);
  omlc_set_int64(v[4], int64_field);
  omlc_set_vector_int32(v[5], vector_int32_field, vector_int32_field_len);
  omlc_set_uint64(v[6], uint64_field);
  omlc_set_bool(v[7], boolean_field);
  omlc_set_vector_uint32(v[8], vector_uint32_field, vector_uint32_field_len);
  omlc_set_double(v[9], double_field);
  omlc_set_vector_int64(v[10], vector_int64_field, vector_int64_field_len);
  omlc_set_blob(v[11], blob_field, blob_field_len);
  omlc_set_vector_uint64(v[12], vector_uint64_field, vector_uint64_field_len);
  omlc_set_int32(v[13], int32_field);
  omlc_set_string(v[14], string_field);

  ret = omlc_inject(mp, v);

  omlc_reset_vector(v[1]);
  omlc_reset_vector(v[3]);
  omlc_reset_vector(v[5]);
  omlc_reset_vector(v[8]);
  omlc_reset_vector(v[10]);
  omlc_reset_blob(v[11]);
  omlc_reset_vector(v[12]);
  omlc_reset_string(v[14]);
  return ret;
}


/* Compatibility with old applications */
#ifndef g_oml_mps
# define g_oml_mps	g_oml_mps_/home/ubuntu/soml/example/liboml2/generator
#endif

#ifdef __cplusplus
}
#endif

#endif /* /HOME/UBUNTU/SOML/EXAMPLE/LIBOML2/GENERATOR_OML_H */
