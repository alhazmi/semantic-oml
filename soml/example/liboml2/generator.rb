# This file was automatically generated by oml2-scaffold V2.12.0pre.79-58cf-dirty
# The syntax of this file is documented at [0].
#
# [0] http://doc.mytestbed.net/doc/omf/OmfEc/Backward/AppDefinition.html

defApplication('ubuntu:app:/home/ubuntu/soml/example/liboml2/generator', '/home/ubuntu/soml/example/liboml2/generator') do |app|

  app.version(1, 0, 0)
  app.shortDescription = 'A short description'
  app.description = %{
A longer description describing in more detail what this application
is doing and useful for.
}
  app.path = "/usr/local/bin//home/ubuntu/soml/example/liboml2/generator"

  # Declare command-line arguments; generate Popt parser with
  #  oml2-scaffold --opts /home/ubuntu/soml/example/liboml2/generator.rb [ONTOLOGY]
  app.defProperty('loop', 'Create periodic result', '-l',
        :type => :boolean, :mnemonic => 'l')
  app.defProperty('delay', 'Delay between consecutive measurements', '-d',
        :type => :integer, :unit => 'seconds', :mnemonic => 'd')

  # Example of all supported command-line argument types; see popt(3) for more details
  app.defProperty('uint32_var', 'Command line option of type uint32', '--uint32',
        :type => :uint32, :var_name => 'varuint32')
  app.defProperty('int64_var', 'Command line option of type int64', '--int64',
        :type => :int64, :var_name => 'varint64')
  app.defProperty('uint64_var', 'Command line option of type uint64', '--uint64',
        :type => :uint64, :var_name => 'varuint64')
  app.defProperty('boolean_var', 'Command line option of type boolean', '--boolean',
        :type => :boolean, :var_name => 'varboolean')
  app.defProperty('double_var', 'Command line option of type double', '--double',
        :type => :double, :var_name => 'vardouble')
  app.defProperty('int32_var', 'Command line option of type int32', '--int32',
        :type => :int32, :var_name => 'varint32')
  app.defProperty('long_var', 'Command line option of type long', '--long',
        :type => :long, :var_name => 'varlong')
  app.defProperty('string_var', 'Command line option of type string', '--string',
        :type => :string, :var_name => 'varstring')

  # Declare measurement points; generate OML injection helpers with
  #  oml2-scaffold --oml /home/ubuntu/soml/example/liboml2/generator.rb --ontology [ONTOLOGY]
  app.defMeasurement("sensor") do |mp|
    mp.defMetric('val', :int32)
    mp.defMetric('inverse', :double)
    mp.defMetric('name', :string)
  end

  # Declare a giant Measurement Point showing all supported types
  app.defMeasurement("example") do |mp|
    mp.defMetric('guid_field', :guid)
    mp.defMetric('vector_bool_field', :vector_bool)
    mp.defMetric('uint32_field', :uint32)
    mp.defMetric('vector_double_field', :vector_double)
    mp.defMetric('int64_field', :int64)
    mp.defMetric('vector_int32_field', :vector_int32)
    mp.defMetric('uint64_field', :uint64)
    mp.defMetric('boolean_field', :boolean)
    mp.defMetric('vector_uint32_field', :vector_uint32)
    mp.defMetric('double_field', :double)
    mp.defMetric('vector_int64_field', :vector_int64)
    mp.defMetric('blob_field', :blob)
    mp.defMetric('vector_uint64_field', :vector_uint64)
    mp.defMetric('int32_field', :int32)
    mp.defMetric('string_field', :string)
  end

end

# Local Variables:
# mode:ruby
# End:
# vim: ft=ruby:sw=2
