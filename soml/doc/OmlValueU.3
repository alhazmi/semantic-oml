'\" t
.\"     Title: OmlValueU
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 2015-04-16
.\"    Manual: The OML Manual
.\"    Source: OML 2.12.0pre.79-58cf-dirty
.\"  Language: English
.\"
.TH "OMLVALUEU" "3" "2015\-04\-16" "OML 2\&.12\&.0pre\&.79\-58cf\-" "The OML Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
OmlValueU \- manipulation functions
.SH "SYNOPSIS"
.sp
.nf
\fB#include <stdint\&.h>\fR
\fB#include <oml2/omlc\&.h>\fR
.fi
.sp
.nf
\fIvoid\fR   \fBomlc_zero\fR(\fIOmlValueU\fR value);
\fIvoid\fR   \fBomlc_zero_array\fR(\fIOmlValueU\fR varray[], \fIunsigned int\fR n);
.fi
.sp
.nf
\fIvoid\fR   \fBomlc_set_int32\fR(\fIOmlValueU\fR value, \fIint32_t\fR int32val);
\fIvoid\fR   \fBomlc_set_uint32\fR(\fIOmlValueU\fR value, \fIuint32_t\fR uint32val);
\fIvoid\fR   \fBomlc_set_int64\fR(\fIOmlValueU\fR value, \fIint64_t\fR int64val);
\fIvoid\fR   \fBomlc_set_uint64\fR(\fIOmlValueU\fR value, \fIuint64_t\fR uint64val);
\fIvoid\fR   \fBomlc_set_double\fR(\fIOmlValueU\fR value, \fIdouble\fR doubleval);
\fIvoid\fR   \fBomlc_set_guid\fR(\fIOmlValueU\fR value, \fIoml_guid_t\fR guidval);
\fIvoid\fR   \fBomlc_set_bool\fR(\fIOmlValueU\fR value, \fIuint8_t\fR bool);
.fi
.sp
.nf
\fIvoid\fR   \fBomlc_set_string\fR(\fIOmlValueU\fR value, \fIchar*\fR stringval);
\fIvoid\fR   \fBomlc_set_string_copy\fR(\fIOmlValueU\fR value, \fIchar*\fR stringval);
\fIvoid\fR   \fBomlc_copy_string\fR(\fIOmlValueU\fR dst, \fIOmlValueU\fR src);
\fIvoid\fR   \fBomlc_reset_string\fR(\fIOmlValueU\fR var);
.fi
.sp
.nf
\fIvoid\fR   \fBomlc_set_blob\fR(\fIOmlValueU\fR value, \fIchar*\fR stringval, \fIsize_t\fR len);
\fIvoid\fR   \fBomlc_copy_blob\fR(\fIOmlValueU\fR dst, \fIOmlValueU\fR src);
\fIvoid\fR   \fBomlc_reset_blob\fR(\fIOmlValueU\fR var);
.fi
.sp
.nf
\fIvoid\fR   \fBomlc_set_vector_double\fR(\fIOmlValueU\fR value, \fIdouble[]\fR doubleptr, \fIsize_t\fR nof_elts) \e
\fIvoid\fR   \fBomlc_set_vector_int32\fR(\fIOmlValueU\fR value, \fIint32_t[]\fR int32ptr, \fIsize_t\fR nof_elts) \e
\fIvoid\fR   \fBomlc_set_vector_uint32\fR(\fIOmlValueU\fR value, \fIuint32_t[]\fR uint32ptr, \fIsize_t\fR nof_elts) \e
\fIvoid\fR   \fBomlc_set_vector_int64\fR(\fIOmlValueU\fR value, \fIint64_t[]\fR int64ptr, \fIsize_t\fR nof_elts) \e
\fIvoid\fR   \fBomlc_set_vector_uint64\fR(\fIOmlValueU\fR value, \fIuint64_t[]\fR uint64ptr, \fIsize_t\fR nof_elts) \e
\fIvoid\fR   \fBomlc_set_vector_bool\fR(\fIOmlValueU\fR value, \fIbool[]\fR boolptr, \fIsize_t\fR nof_elts) \e
\fIvoid\fR   \fBomlc_copy_vector\fR(\fIOmlValueU\fR dst, \fIOmlValueU\fR src) \e
.fi
.SH "DESCRIPTION"
.sp
These functions are convenience macros for setting the values of an \fIOmlValueU\fR array to be passed to \fBomlc_inject\fR(3)\&. The underlying \fIOmlValueU\fR array is a simple union, but it should be treated as an opaque type to ensure backwards compatibility for applications using OML\&. These macros operate on this type\&.
.sp
Before any manipulation, \fIOmlValueU\fR storage needs to be zeroed out properly to avoid memory corruption issue\&. This is done through the \fIomlc_zero\fR and \fIomlc_zero_array\fR functions\&. They can then be manipulated with the \fIomlc_set_*\fR group of functions described below\&.
.sp
The \fI(u)int{32,64}\fR variants are for setting integral types\&. The argument should be one of the equivalent types from \fBstdint\&.h\fR\&. The \fIdouble\fR variant is for setting double precision floating point values\&. The \fIguid\fR variant is similar, but is use to inject \fIoml_guid_t\fR globally unique identifiers generated by \fBomlc_guid_generate\fR(3)\&.
.sp
The \fIguid\fR variant allows to manipulate the opaque GUID values of \fIOML_GUID_VALUE\fR \fIMP\fR fields, used to group measurement samples within or accross \fIMPs\fR\&. These values can be generated with \fBomlc_guid_generate\fR(3)\&. The special \fINULL\fR value \fIOMLC_GUID_NULL\fR can also be used as a default in case grouping is irrelevant for a particular sample\&. More details on the use of this data type can be found in \fBliboml2\fR(3)\&.
.sp
The \fIbool\fR variant allows to manipulates boolean values\&. It is recommended to use the shorthands \fIOMLC_BOOL_FALSE\fR and \fIOMLC_BOOL_TRUE\fR rather than any other value\&. \fI0\fR is equivalent to \fIOMLC_BOOL_FALSE\fR, while anything different is equivalent to \fIOMLC_BOOL_TRUE\fR\&. There is no guarantee that anything non \fI0\fR will retain its specific value in the \fIOmlValueU\fR\&.
.sp
The \fIstring\fR variant is for setting nul\-terminated string values\&. Note that only the pointer is copied by the macro, but that the library internally copies the caller\(cqs string into its own internally managed memory, so the caller does not need to worry about preserving the string after any call to \fBomlc_inject\fR(3) on the \fIOmlValueU\fR array\&. The \fIstring_copy\fR variant actually duplicates the string in dynamically allocated storage\&. To avoid memory leaks, it is advised to use \fIomlc_reset_string\fR on an \fIOmlValueU\fR which last contained strings prior to reusing them for other types\&.
.sp
The \fIblob\fR variant is for storing arbitrary binary data\&. The data is copied in a dynamically allocated memory buffer\&. To avoid memory leaks, \fIomlc_reset_blob\fR must be used on an \fIOmlValueU\fR which last contained blobs prior to reusing them for other types\&.
.sp
The \fIvector\fR variants are used to assign a variable\-sized vector of primitive values (of types (u)int{32,64}_t, double and bool) to a single \fIOmlValueU\fR\&. The vector is specified by passing a pointer to the base element and the number of elements that the vector contains\&. To avoid memory leaks, it is advised to use \fIomlc_reset_vector\fR on an \fIOmlValueU\fR which last contained a vector prior to reusing them for other types\&.
.sp
The \fIcopy_*\fR variants do a deep copy of the \fIOmlValueU\fR of the relevant type, duplicating the stored data in a dynamically allocated memory buffer\&.
.sp
For an example of how these macros should be used, refer to \fBomlc_inject\fR(3) and \fBliboml2\fR(3)\&.
.SH "RETURN VALUE"
.sp
These functions are defined as macros and so don\(cqt return values\&. They should be treated as separate statements, rather than as proper functions\&. In a future version of OML they may be converted to real inline functions\&.
.SH "BUGS"
.sp
C preprocessor macros are generally brittle and error prone\&. Unfortunately, they are all we\(cqve got\&.
.sp
If a problem you are experiencing is not addressed in the FAQ (http://oml\&.mytestbed\&.net/projects/oml/wiki/FAQ_and_Support) nor already present in the list of know bugs (http://oml\&.mytestbed\&.net/projects/oml/issues)\&. You could discuss it on the mailing list (details and archives at http://oml\&.mytestbed\&.net/tab/show?id=oml)\&.
.sp
It is however advisable to open a ticket on our issue tracker at http://oml\&.mytestbed\&.net/projects/oml/issues/new\&. Don\(cqt forget to include details such as client and server logs (at \fI[\-\-oml\-log\-level|\-d] 2\fR)\&. It also helps if you can share the source code of a (minimal, if possible) example reliably triggering the problem\&.
.SH "SEE ALSO"
.SS "Manual Pages"
.sp
\fBliboml2\fR(3), \fBomlc_inject\fR(3)
.SS "OML User Manual"
.sp
http://oml\&.mytestbed\&.net/projects/oml/wiki/Documentation
