ACLOCAL_AMFLAGS = -I ../m4 -Wnone

# Automake doesn't support infos_TEXINFOS to be defined conditionnaly
info_TEXINFOS = oml-user-manual.texi

DATE=`date "+%Y-%m-%d"`
ALL_MAN_FILES= \
	liboml2.1.txt \
	oml2-server.1.txt \
	oml2-proxy-server.1.txt \
	oml2-proxycon.1.txt \
	oml2-scaffold.1.txt \
	liboml2.3.txt \
	omlc_init.3.txt \
	omlc_add_mp.3.txt \
	omlc_start.3.txt \
	omlc_inject.3.txt \
	omlc_close.3.txt \
	OmlValueU.3.txt \
	liboml2.conf.5.txt

LIBOML3_LINKS = \
	omlc_guid_generate.3 \
	oml_inject_MPNAME.3 \
	oml_register_mps.3

OMLVALUE3_LINKS= \
	omlc_zero.3 \
	omlc_zero_array.3 \
	omlc_set_int32.3 \
	omlc_set_uint32.3 \
	omlc_set_int64.3 \
	omlc_set_uint64.3 \
	omlc_set_double.3 \
	omlc_set_guid.3 \
	omlc_set_string.3 \
	omlc_set_string_copy.3 \
	omlc_copy_string.3 \
	omlc_reset_string.3 \
	omlc_set_blob.3 \
	omlc_copy_blob.3 \
	omlc_reset_blob.3

OMLCINJECT3_LINKS = \
	omlc_inject_metadata.3

# How to publish documentation
USER= # If set, should contain a trailing @
WWWHOST=mytestbed.net
HTDOCS=/var/www/redmine_mytestbed.net/public/doc/oml/$(OML_BASE_VER)

# This rule will fail, purposefully, if some documentation cannot be generated
publish: publish-man publish-doxygen

index.txt: index.tpl.txt
	cat $< > $@
	echo -e "Manpages\n--------" >> $@
	for MANPAGE in $(ALL_MAN_FILES:.txt=); do \
		echo $${MANPAGE} | sed 's/\(.*\)\.\([0-9]\)/* link:\1.\2.html[\1(\2)]/' >> $@; \
		if [ "$${MANPAGE}" = "OmlValueU.3" ]; then \
			for LINK in $(OMLVALUE3_LINKS); do \
				echo $${LINK} | sed "s/\(.*\)\.\([0-9]\)/** link:$${MANPAGE}.html[\1(\2)]/" >> $@; \
			done; \
		elif [ "$${MANPAGE}" = "omlc_inject.3" ]; then \
			for LINK in $(OMLCINJECT3_LINKS); do \
				echo $${LINK} | sed "s/\(.*\)\.\([0-9]\)/** link:$${MANPAGE}.html[\1(\2)]/" >> $@; \
			done; \
		elif [ "$${MANPAGE}" = "liboml2.3" ]; then \
			for LINK in $(LIBOML3_LINKS); do \
				echo $${LINK} | sed "s/\(.*\)\.\([0-9]\)/** link:$${MANPAGE}.html[\1(\2)]/" >> $@; \
			done; \
		fi; \
	done
	echo -e "\nOther\n-----" >> $@
	echo "* link:doxygen/[Doxygen documentation]" >> $@

EXTRA_DIST=$(ALL_MAN_FILES) \
	   bugs.txt \
	   manual.txt \
	   index.tpl.txt \
	   doxygen.am Doxyfile
CLEANFILES=$(ALL_MAN_FILES:.txt=) \
	liboml2.3 \
	oml2_scaffold.1 \
	$(LIBOML3_LINKS) \
	$(OMLCINJECT3_LINKS) \
	$(OMLVALUE3_LINKS) \
	oml2_scaffold.1

MOSTLYCLEANFILES=$(DX_CLEANFILES)

if ENABLE_DOC
include doxygen.am

# Doxygen is a bit braindamaged and doesn't seem to be able to either
# * parse file with no extension as something else than C
# * include and parse contents from another file
# On the plus side, this gives us an opportunity to do some search/replace
# and avoid poluting the human-readable source files while providing nice
# Doxygen links.
# Note: doxygen.am has been modified so @DX_DOCDIR@/@PACKAGE@.tag depends on $(DX_EXTRA_DOC)
DX_EXTRA_DOC = mainpage.md install.md example.md
CLEANFILES += $(DX_EXTRA_DOC)
define README-mdfy
	sed -e '1s/$$/\t{$1}/' \
		-e 's^\([^/]\)README^\1[README](@ref index)^g' \
		-e 's^INSTALL^[&](@ref install)^g' \
		-e 's^example/liboml2/README^[&](@ref example)^' \
		-e '/^    /!s^\(\(lib\)\?[Oo]ml[-.a-zA-Z1-9]\+\)(\([0-9]\))^[&](http://oml.mytestbed.net/doc/oml/$(OML_BASE_VER)/\1.\3.html)^g'
endef
mainpage.md: $(top_srcdir)/README.md
	$(call README-mdfy,#mainpage) $< > $@
install.md: $(top_srcdir)/INSTALL
	$(call README-mdfy,#install) $< > $@
example.md: $(top_srcdir)/example/liboml2/README
	$(call README-mdfy,#example) $< > $@

if HAVE_PLANTUML
EXTRA_DIST += images/
images/: plantuml-diagrams
DX_EXTRA_DOC += plantuml-diagrams

plantuml-diagrams:
	$(PLANTUML) -o "`pwd`/images"  "$(top_srcdir)/**.(c|h|md)"
plantuml-clean:
	rm -rf `pwd`/images
distclean-local: plantuml-clean
endif


publish-doxygen: @DX_DOCDIR@/@PACKAGE@.tag
	ssh $(USER)$(WWWHOST) mkdir -p $(HTDOCS)/
	ssh $(USER)$(WWWHOST) rm -rf $(HTDOCS)/doxygen/
	scp -r  @DX_DOCDIR@/html/ $(USER)$(WWWHOST):$(HTDOCS)/doxygen/

if DX_COND_doc
all: doxygen-doc

endif

ASCIIDOC_ARGS = --attribute='badges' --attribute='icons'
ASCIIDOC_ARGS += --attribute='pkglocalstatedir=$(pkglocalstatedir)' --attribute='oml_version=$(VERSION)' --attribute='pkgdatadir=$(pkgdatadir)'
if HAVE_LIBPQ
ASCIIDOC_ARGS += --attribute='have_pg'
endif
A2X_ARGS = --destination-dir=. -f manpage $(ASCIIDOC_ARGS) --attribute='date=$(DATE)'

if HAVE_A2X
man_MANS = $(ALL_MAN_FILES:.txt=) \
	$(LIBOML3_LINKS) \
	$(OMLCINJECT3_LINKS) \
	$(OMLVALUE3_LINKS) \
	oml2_scaffold.1

$(ALL_MAN_FILES:.txt=):  %: %.txt bugs.txt manual.txt
	$(A2X) $(A2X_ARGS) $<
	export XMLOUT=`echo $< | sed s/.txt$$/.xml/`; \
	       test -f $${XMLOUT} && rm $${XMLOUT} || true

# Set up ROFF links
#  - oml_register_mps and oml_inject_MPNAME helpers, generated by
#  oml2-scaffold, are documented in liboml(3)
$(LIBOML3_LINKS):
	echo ".so man3/liboml2.3" > $@
#  - the OmlValueU manipulation macros (they share the same manpage).
$(OMLVALUE3_LINKS):
	echo ".so man3/OmlValueU.3" > $@
# - omlc_inject_metadata is documented in omlc_inject(3)
$(OMLCINJECT3_LINKS):
	echo ".so man3/omlc_inject.3" > $@
#  - oml2_scaffold (renamed to oml2-scaffold)
oml2_scaffold.1:
	echo ".so man1/oml2-scaffold.1" > $@

EXTRA_DIST+=$(ALL_MAN_FILES:.txt=)  \
	$(LIBOML3_LINKS) \
	$(OMLCINJECT3_LINKS) \
	$(OMLVALUE3_LINKS) \
	oml2_scaffold.1

else #!HAVE_A2X
	@echo "*** a2x (asciidoc) is required to generate $(@) ***"
endif #HAVE_A2X

if HAVE_ASCIIDOC
html_docs = $(ALL_MAN_FILES:.txt=.html) index.html

CLEANFILES += index.txt \
	      $(html_docs)

SUFFIXES = .html
.txt.html:
	$(ASCIIDOC) $(ASCIIDOC_ARGS) -o $@ $<
index.html: index.txt
	$(ASCIIDOC) $(ASCIIDOC_ARGS) -o $@ $<

all: $(html_docs)

publish-man: $(html_docs)
	ssh $(USER)$(WWWHOST) mkdir -p $(HTDOCS)/
	scp $(html_docs) oml_logo.png $(USER)$(WWWHOST):$(HTDOCS)/

else #!HAVE_ASCIIDOC
	@echo "*** a2x (asciidoc) is required to generate $(@) ***"
endif #HAVE_ASCIIDOC

endif #ENABLE_DOC
